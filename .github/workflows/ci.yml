name: C++ CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC 
  - cron:  '0 2 * * *'
  
  
jobs:
  build:
    name: '[${{ matrix.project_tags }}@${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Debug, Release]
        project_tags: [Stable, Unstable]
        os: [ubuntu-latest, macOS-latest, windows-2019]
        include:
          - os: ubuntu-latest
            build_type: Debug
            cmake_generator: "Ninja"
          - os: ubuntu-latest
            build_type: Release
            cmake_generator: "Unix Makefiles"
          - os: macOS-latest
            build_type: Debug
            cmake_generator: "Unix Makefiles"
          - os: macOS-latest
            build_type: Release
            cmake_generator: "Xcode"

    steps:
    - uses: actions/checkout@master
        
    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env
        
    # ============
    # DEPENDENCIES
    # ============
    
    # Waiting a github action that installs dependencies in a
    # multiplatform setup (likely using TS or JS), we install
    # packages with os-specific steps.
    
    - name: Dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x ./.ci/install_debian.sh
        sudo ./.ci/install_debian.sh

    - name: Dependencies [MacOS]
      if: matrix.os == 'macOS-latest'
      run: |
        cmake --version
        brew cask install xquartz
        # Update homebrew 
        brew update
        brew upgrade
        # Core dependencies 
        brew install ace boost cmake eigen gsl ipopt jpeg libedit opencv@3 pkg-config qt5 sqlite swig tinyxml
        # ROBOTOLOGY_ENABLE_DYNAMICS dependencies 
        brew install libmatio
        # ROBOTOLOGY_USES_GAZEBO dependencies 
        brew install osrf/simulation/gazebo10
        # CI-specific dependencies 
        brew install ninja
        cmake --version
        
    - name: Dependencies [Windows]
      if: matrix.os == 'windows-2019'
      run: |
        # To avoid spending a huge time compiling vcpkg dependencies, we download a root that comes precompiled with all the ports that we need 
        choco install -y wget unzip
        # To avoid problems with non-relocatable packages, we unzip the archive exactly in the same C:/vcpkg-robotology 
        # that has been used to create the pre-compiled archive
        cd C:/
        wget https://github.com/robotology-playground/robotology-superbuild-dependencies/releases/download/v0.0.2/vcpkg-robotology.zip
        unzip vcpkg-robotology.zip        
        
    # ===================
    # CMAKE-BASED PROJECT
    # ===================
    
    - name: Configure [Ubuntu&macOS]
      if: matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build    
        cmake -G"${{ matrix.cmake_generator }}" -DROBOTOLOGY_USES_GAZEBO:BOOL=ON -DROBOTOLOGY_USES_OCTAVE:BOOL=ON -DROBOTOLOGY_USES_PYTHON:BOOL=ON -DROBOTOLOGY_ENABLE_ROBOT_TESTING:BOOL=ON  -DROBOTOLOGY_ENABLE_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_HUMAN_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=ON -DNON_INTERACTIVE_BUILD:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}  -DROBOTOLOGY_PROJECT_TAGS=${{ matrix.project_tags }} ..

    - name: Disable macOS unsupported options 
      if: matrix.os == 'macOS-latest'
      run: | 
        cd build
        # Disable ROBOTOLOGY_USES_PYTHON in macOS 
        cmake -DROBOTOLOGY_USES_OCTAVE:BOOL=OFF -DROBOTOLOGY_USES_PYTHON:BOOL=OFF .

    - name: Configure [Windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        mkdir -p build
        cd build    
        # Note: DYNAMICS is disabled as a workaround for https://github.com/robotology/blockfactory/pull/45
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg-robotology/scripts/buildsystems/vcpkg.cmake -DROBOTOLOGY_USES_GAZEBO:BOOL=OFF -DROBOTOLOGY_USES_OCTAVE:BOOL=OFF -DROBOTOLOGY_USES_PYTHON:BOOL=OFF -DROBOTOLOGY_ENABLE_ROBOT_TESTING:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS:BOOL=OFF -DROBOTOLOGY_ENABLE_HUMAN_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=ON -DNON_INTERACTIVE_BUILD:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}  -DROBOTOLOGY_PROJECT_TAGS=${{ matrix.project_tags }} ..

    - name: Build  [Ubuntu&macOS]
      if: matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}
      env: 
        # This is necessary only on macOS/homebrew, but on Linux it should be ignored
        Qt5_DIR: /usr/local/opt/qt5/lib/cmake/Qt5   
        
    - name: Build  [Windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        cd build
        # yarp's rosmsgs generator links ACE, so it needs to find ACE dll in the path to run 
        export PATH=$PATH:/c/vcpkg-robotology/installed/x64-windows/bin:/c/vcpkg-robotology/installed/x64-windows/debug/bin
        cmake --build . --config ${{ matrix.build_type }}  
