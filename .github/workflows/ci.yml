name: C++ CI Workflow

on:
  push:
    branches:
      - master
      - 'releases/**'
    tags:
      - v*
  pull_request:
  release:
    types: [published]
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC 
  - cron:  '0 2 * * *'


jobs:
  conda-build:    
    name: '[conda:Tags:${{ matrix.project_tags }}@${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        # Windows is disabled due to the missing ipopt package
        os: [ubuntu-latest, macos-latest]
        cmake_generator: 
          - "Ninja"
        project_tags:
          - Default
          - Unstable
        include:
          - project_tags: Default
            project_tags_cmake_options: ""
          - project_tags: Unstable
            project_tags_cmake_options: "-DROBOTOLOGY_PROJECT_TAGS=Unstable"

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true

    - name: Dependencies [Conda]
      shell: bash -l {0}
      run: |
        # Install mamba (https://github.com/mamba-org/mamba) as first step 
        conda install -c conda-forge mamba
        # Compilation related dependencies 
        mamba install -c conda-forge cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install -c conda-forge ace asio boost eigen gazebo glew glfw gsl ipopt libjpeg-turbo libmatio libode libxml2 opencv pkg-config portaudio qt sdl sdl2 sqlite tinyxml

    # Additional dependencies useful only on Linux
    - name: Dependencies [Conda/Linux]
      if: contains(matrix.os, 'ubuntu') 
      shell: bash -l {0}
      run: |
        # Additional dependencies only useful on Linux
        # See https://github.com/robotology/robotology-superbuild/issues/477
        mamba install -c conda-forge expat-cos6-x86_64 freeglut libselinux-cos6-x86_64 libxau-cos6-x86_64 libxcb-cos6-x86_64 libxdamage-cos6-x86_64 libxext-cos6-x86_64 libxfixes-cos6-x86_64 libxxf86vm-cos6-x86_64 mesalib mesa-libgl-cos6-x86_64

    - name: Configure [Conda]
      # ROBOTOLOGY_ENABLE_ICUB_HEAD is disabled due to https://github.com/robotology/icub-main/issues/685
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"${{ matrix.cmake_generator }}" -DROBOTOLOGY_USES_GAZEBO:BOOL=ON -DROBOTOLOGY_USES_OCTAVE:BOOL=OFF -DROBOTOLOGY_USES_PYTHON:BOOL=OFF -DROBOTOLOGY_ENABLE_ROBOT_TESTING:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_HUMAN_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=OFF -DROBOTOLOGY_ENABLE_ICUB_BASIC_DEMOS:BOOL=ON -DROBOTOLOGY_ENABLE_TELEOPERATION:BOOL=ON -DROBOTOLOGY_ENABLE_EVENT_DRIVEN:BOOL=ON -DNON_INTERACTIVE_BUILD:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}  ${{ matrix.project_tags_cmake_options }}  ..

    - name: Build  [Conda]
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

  docker-build:    
    name: '[docker:Tags:${{ matrix.project_tags }}@${{ matrix.docker_image }}@${{ matrix.build_type }}]'
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug]
        cmake_generator: 
          - "Ninja"
        docker_image: 
          - "ubuntu:focal"
          - "debian:buster-backports"
          - "debian:sid"

        project_tags:
          - Default
          - Unstable
        include:
          - project_tags: Default
            project_tags_cmake_options: ""
          - project_tags: Unstable
            project_tags_cmake_options: "-DROBOTOLOGY_PROJECT_TAGS=Unstable"
                      
    container:
      image: ${{ matrix.docker_image }}
  
    steps:
    - uses: actions/checkout@master
          
    - name: Dependencies [Docker]
      run: |
        chmod +x ./.ci/install_debian.sh
        ./.ci/install_debian.sh

    - name: Install CMake 3.16 [Docker/Debian Buster] 
      if: matrix.docker_image == 'debian:buster-backports'
      run: |
        apt-get -y -t buster-backports install cmake
        
    - name: Install additional packages for Debian Sid [Debian Sid]
      if: matrix.docker_image == 'debian:sid'
      run: |
        # Workaround for https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=967008
        apt-get -y install libdart-external-odelcpsolver-dev
        
    - name: Configure [Docker]
      run: |
        mkdir -p build
        cd build
        # Octave is disabled as a workaround for https://github.com/robotology/robotology-superbuild/issues/384
        # Python is disabled as a workaround for https://github.com/robotology/robotology-superbuild/issues/494
        cmake -G"${{ matrix.cmake_generator }}" -DROBOTOLOGY_USES_GAZEBO:BOOL=ON -DROBOTOLOGY_USES_OCTAVE:BOOL=OFF -DROBOTOLOGY_USES_PYTHON:BOOL=OFF -DROBOTOLOGY_ENABLE_ROBOT_TESTING:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS_FULL_DEPS:BOOL=ON -DROBOTOLOGY_ENABLE_HUMAN_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_BASIC_DEMOS:BOOL=ON -DROBOTOLOGY_ENABLE_TELEOPERATION:BOOL=ON -DROBOTOLOGY_ENABLE_EVENT_DRIVEN:BOOL=ON -DNON_INTERACTIVE_BUILD:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}  ${{ matrix.project_tags_cmake_options }}  ..

    - name: Disable profiles that are not supported in docker for now [Docker debian-sid and debian-buster]
      if: (matrix.docker_image == 'debian:sid' || matrix.docker_image == 'debian:buster-backports')
      run: |
       cd build
       cmake -DROBOTOLOGY_ENABLE_DYNAMICS_FULL_DEPS:BOOL=OFF .

    - name: Build  [Docker]
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

  normal-build:
    name: '[Tags:${{ matrix.project_tags }}@${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0, windows-2019]
        project_tags: [Default, Unstable, Release202011]
        include:
          - os: ubuntu-18.04
            build_type: Release
            cmake_generator: "Unix Makefiles"
          - os: ubuntu-20.04
            build_type: Debug
            cmake_generator: "Ninja"
          - os: ubuntu-20.04
            build_type: Release
            cmake_generator: "Unix Makefiles"
          - os: macos-10.15
            build_type: Debug
            cmake_generator: "Unix Makefiles"
          - os: macos-10.15
            build_type: Release
            cmake_generator: "Ninja"
          - os: macos-11.0
            build_type: Debug
            cmake_generator: "Unix Makefiles"
          - os: macos-11.0
            build_type: Release
            cmake_generator: "Ninja"
          - project_tags: Default
            project_tags_cmake_options: ""
          - project_tags: Unstable
            project_tags_cmake_options: "-DROBOTOLOGY_PROJECT_TAGS=Unstable"
          - project_tags: Release202011
            project_tags_cmake_options: "-DROBOTOLOGY_PROJECT_TAGS=Custom -DROBOTOLOGY_PROJECT_TAGS_CUSTOM_FILE=${GITHUB_WORKSPACE}/releases/2020.11.yaml"
    steps:
    - uses: actions/checkout@master

    - name: Check free space 
      shell: bash 
      run: |
        df -h

    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env

    # Remove apt repos that are known to break from time to time 
    # See https://github.com/actions/virtual-environments/issues/323  
    - name: Remove broken apt repos [Ubuntu]
      if: contains(matrix.os, 'ubuntu')
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        
    # symlinks disabled are the default setting on Windows, but unfortunatly GitHub Actions enabled them 
    # See: 
    # * https://github.com/robotology/robotology-superbuild/issues/429
    # * https://github.com/actions/virtual-environments/pull/1186  
    - name: Disable Git symlinks on Windows 
      if: contains(matrix.os, 'windows')
      run: git config --global core.symlinks false
 
    # ============
    # DEPENDENCIES
    # ============
    
    # Waiting a github action that installs dependencies in a
    # multiplatform setup (likely using TS or JS), we install
    # packages with os-specific steps.
    
    - name: Dependencies [Ubuntu]
      if: contains(matrix.os, 'ubuntu')
      run: |
        chmod +x ./.ci/install_debian.sh
        sudo ./.ci/install_debian.sh

    - name: Dependencies [macOS]
      if: contains(matrix.os, 'macos')
      run: |
        cmake --version
        brew cask install xquartz
        # Update homebrew 
        # Workaround for https://github.com/actions/virtual-environments/issues/1811#issuecomment-718475660
        brew unlink python@3.8
        brew update
        brew upgrade
        # Core dependencies 
        brew install ace boost cmake eigen gsl ipopt jpeg libedit opencv pkg-config portaudio qt5 sqlite swig tinyxml
        # ROBOTOLOGY_ENABLE_DYNAMICS dependencies 
        brew install libmatio
        # ROBOTOLOGY_ENABLE_DYNAMICS_FULL_DEPS (qhull and cppad are installed  with brew)
        brew install cppad qhull
        # ROBOTOLOGY_USES_GAZEBO dependencies
        brew install osrf/simulation/gazebo11
        # CI-specific dependencies 
        brew install ninja
        cmake --version
        
    - name: Dependencies [Windows]
      if: contains(matrix.os, 'windows')
      run: |
        # To avoid spending a huge time compiling vcpkg dependencies, we download an archive  that comes precompiled with all the ports that we need 
        choco install -y wget unzip
        # To avoid problems with non-relocatable packages, we unzip the archive exactly in the same directory
        # that has been used to create the pre-compiled archive
        cd C:/
        wget https://github.com/robotology/robotology-superbuild-dependencies-vcpkg/releases/download/v0.5.0/vcpkg-robotology-with-gazebo.zip
        unzip vcpkg-robotology-with-gazebo.zip -d C:/
        rm vcpkg-robotology-with-gazebo.zip
        
    # ===================
    # CMAKE-BASED PROJECT
    # ===================
    
    - name: Configure [Ubuntu&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -G"${{ matrix.cmake_generator }}" -DYCM_BOOTSTRAP_VERBOSE=ON -DROBOTOLOGY_USES_GAZEBO:BOOL=ON -DROBOTOLOGY_USES_OCTAVE:BOOL=ON -DROBOTOLOGY_USES_PYTHON:BOOL=ON -DROBOTOLOGY_ENABLE_ROBOT_TESTING:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS_FULL_DEPS:BOOL=ON -DROBOTOLOGY_ENABLE_HUMAN_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_BASIC_DEMOS:BOOL=ON -DROBOTOLOGY_ENABLE_TELEOPERATION:BOOL=ON -DROBOTOLOGY_ENABLE_EVENT_DRIVEN:BOOL=ON -DNON_INTERACTIVE_BUILD:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.project_tags_cmake_options }} ..

    - name: Disable macOS unsupported options 
      if: contains(matrix.os, 'macos')
      run: | 
        cd build
        # Disable ROBOTOLOGY_USES_PYTHON in macOS 
        cmake -DROBOTOLOGY_USES_OCTAVE:BOOL=OFF -DROBOTOLOGY_USES_PYTHON:BOOL=OFF .

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash
      run: |
        # Make sure that Gazebo packages can be found by CMake
        source /c/robotology/scripts/setup-deps.sh
        mkdir -p build
        cd build
        # ROBOTOLOGY_ENABLE_TELEOPERATION is OFF as a workaround for https://github.com/robotology/robotology-superbuild/issues/472
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=C:/robotology/vcpkg/scripts/buildsystems/vcpkg.cmake -DYCM_BOOTSTRAP_VERBOSE=ON -DYCM_EP_INSTALL_DIR=C:/robotology/robotology -DROBOTOLOGY_USES_GAZEBO:BOOL=ON -DROBOTOLOGY_USES_OCTAVE:BOOL=OFF -DROBOTOLOGY_USES_PYTHON:BOOL=OFF -DROBOTOLOGY_USES_ESDCAN:BOOL=ON -DROBOTOLOGY_ENABLE_ROBOT_TESTING:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_DYNAMICS_FULL_DEPS:BOOL=ON -DROBOTOLOGY_ENABLE_HUMAN_DYNAMICS:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_HEAD:BOOL=ON -DROBOTOLOGY_ENABLE_ICUB_BASIC_DEMOS:BOOL=ON -DROBOTOLOGY_ENABLE_TELEOPERATION:BOOL=OFF -DROBOTOLOGY_ENABLE_EVENT_DRIVEN:BOOL=OFF  -DNON_INTERACTIVE_BUILD:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}  ${{ matrix.project_tags_cmake_options }} ..


    - name: Build  [Ubuntu&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}
      env: 
        # This is necessary only on macOS/homebrew, but on Linux it should be ignored
        Qt5_DIR: /usr/local/opt/qt5/lib/cmake/Qt5

    # Just for  release jobs we also compile Windows in Debug, to ensure that Debug libraries are included in the installer
    - name: Build (Debug) [Windows]
      if: github.event_name == 'release' && matrix.project_tags == 'Default' && contains(matrix.os, 'windows')
      shell: bash
      run: |
        cd build
        # Make sure that vcpkg's ace .dll are on the PATH
        source /c/robotology/scripts/setup-deps.sh
        cmake --build . --config Debug
        # Cleanup build directories to avoid to fill the disk
        rm -rf ./robotology

    - name: Build (Release) [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash
      run: |
        cd build
        # Make sure that vcpkg's ace .dll are on the PATH
        source /c/robotology/scripts/setup-deps.sh
        cmake --build . --config Release
        # Cleanup build directories to avoid to fill the disk
        rm -rf ./robotology

    # Just for release builds we gerate the installer
    - name: Generate installer [Windows]
      if: github.event_name == 'release' && matrix.project_tags == 'Default' && matrix.os == 'windows-2019'
      shell: bash
      run: |
        # Download QtIFW
        cd /c
        certutil.exe -urlcache -split -f https://github.com/robotology-dependencies/qtifw-binaries/releases/download/v3.1.1/QtIFW-3.1.1.zip QtIFW-3.1.1.zip
        7z.exe x QtIFW-3.1.1.zip
        export PATH=$PATH:/c/QtIFW-3.1.1/bin
        # As we need a lot of space, we build the installer in the C:\ drive 
        # that has more space of the D:\ drive in GitHub Actions
        mkdir /c/build-installer-full
        cd /c/build-installer-full
        cmake -A x64 -DRI_BUILD_FULL_INSTALLER:BOOL=ON ${GITHUB_WORKSPACE}/packaging/windows
        cmake --build . --config Release --target PACKAGE
        # Move installer in installer directory with a fixed name
        mv *.exe /c/robotology-full-installer-win64.exe
        # Cleanup and build dependencies installer 
        cd /c
        rm -rf /c/build-installer-full
        mkdir /c/build-installer-dependencies
        cd /c/build-installer-dependencies
        cmake -A x64 -DRI_BUILD_FULL_INSTALLER:BOOL=OFF ${GITHUB_WORKSPACE}/packaging/windows
        cmake --build . --config Release --target PACKAGE
        # Move installer in installer directory with a fixed name
        mv *.exe /c/robotology-dependencies-installer-win64.exe

    - name: Upload Full Installer [Windows]
      if: github.event_name == 'release' && matrix.project_tags == 'Default' && matrix.os == 'windows-2019'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: C:/robotology-full-installer-win64.exe
          asset_name: robotology-full-installer-win64.exe
          asset_content_type: application/octet-stream

    - name: Upload Dependencies installer  [Windows]
      if: github.event_name == 'release' && matrix.project_tags == 'Default' && matrix.os == 'windows-2019'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: C:/robotology-dependencies-installer-win64.exe
          asset_name: robotology-dependencies-installer-win64.exe
          asset_content_type: application/octet-stream
